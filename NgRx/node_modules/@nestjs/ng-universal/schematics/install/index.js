"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const utils_1 = require("@nguniversal/common/schematics/utils/index");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const workspace_1 = require("@schematics/angular/utility/workspace");
const SERVER_DIST = 'dist/server';
function addDependenciesAndScripts() {
    return (host) => {
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/common',
            version: '^7.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/core',
            version: '^7.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: 'reflect-metadata',
            version: '^0.1.13'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: 'class-transformer',
            version: '^0.2.3'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: 'class-validator',
            version: '^0.9.1'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/platform-express',
            version: '^7.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/ng-universal',
            version: '^4.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nguniversal/express-engine',
            version: '^10.0.0'
        });
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'prebuild:ssr': `ngcc` });
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
    };
}
function updateWorkspaceConfigRule(options) {
    return () => {
        return workspace_1.updateWorkspace(workspace => {
            const projectName = options.clientProject;
            const project = workspace.projects.get(projectName);
            if (!project) {
                return;
            }
            const serverTarget = project.targets.get('server');
            serverTarget.options.externalDependencies = [
                '@nestjs/microservices',
                '@nestjs/microservices/microservices-module',
                '@nestjs/websockets',
                '@nestjs/websockets/socket-module',
                'cache-manager'
            ];
            const configurations = serverTarget.configurations;
            if (!configurations) {
                return;
            }
            if (configurations.production) {
                configurations.production.optimization = false;
            }
        });
    };
}
function addFiles(options) {
    return (tree, _context) => __awaiter(this, void 0, void 0, function* () {
        const browserDistDirectory = yield utils_1.getOutputPath(tree, options.clientProject, 'build');
        const rule = schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files/root'), [
            schematics_1.template(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), { stripTsExtension: (s) => s.replace(/\.ts$/, ''), getBrowserDistDirectory: () => browserDistDirectory, getServerDistDirectory: () => SERVER_DIST, getClientProjectName: () => options.clientProject })),
            schematics_1.forEach((fileEntry) => {
                if (tree.exists(fileEntry.path)) {
                    tree.overwrite(fileEntry.path, fileEntry.content);
                    return null;
                }
                return fileEntry;
            })
        ]));
        return rule;
    });
}
function default_1(options) {
    return (host, context) => {
        if (!options.skipInstall) {
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
        return schematics_1.chain([
            schematics_1.externalSchematic('@nguniversal/express-engine', 'ng-add', options),
            addFiles(options),
            addDependenciesAndScripts(),
            updateWorkspaceConfigRule(options)
        ]);
    };
}
exports.default = default_1;
