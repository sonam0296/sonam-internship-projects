/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/utils", ["require", "exports", "fs", "guess-parser", "os", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIndexOutputFile = exports.shardArray = exports.getRoutes = void 0;
    const fs = require("fs");
    const guess_parser_1 = require("guess-parser");
    const os = require("os");
    const path = require("path");
    /**
     * Returns the union of routes, the contents of routesFile if given,
     * and the static routes extracted if guessRoutes is set to true.
     */
    function getRoutes(options, tsConfigPath, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let routes = options.routes || [];
            const { logger, workspaceRoot } = context;
            if (options.routesFile) {
                const routesFilePath = path.join(workspaceRoot, options.routesFile);
                routes = routes.concat(fs.readFileSync(routesFilePath, 'utf8')
                    .split(/\r?\n/)
                    .filter(v => !!v));
            }
            if (options.guessRoutes && tsConfigPath) {
                try {
                    routes = routes.concat(guess_parser_1.parseAngularRoutes(path.join(workspaceRoot, tsConfigPath))
                        .map(routeObj => routeObj.path)
                        .filter(route => !route.includes('*') && !route.includes(':')));
                }
                catch (e) {
                    logger.error('Unable to extract routes from application.', e);
                }
            }
            return [...new Set(routes)];
        });
    }
    exports.getRoutes = getRoutes;
    /**
     * Evenly shards items in an array.
     * e.g. shardArray([1, 2, 3, 4], 2) => [[1, 2], [3, 4]]
     */
    function shardArray(items, maxNoOfShards = (os.cpus().length - 1) || 1) {
        const shardedArray = [];
        const numShards = Math.min(maxNoOfShards, items.length);
        for (let i = 0; i < numShards; i++) {
            shardedArray.push(items.filter((_, index) => index % numShards === i));
        }
        return shardedArray;
    }
    exports.shardArray = shardArray;
    /**
     * Returns the name of the index file outputted by the browser builder.
     */
    function getIndexOutputFile(options) {
        if (typeof options.index === 'string') {
            return path.basename(options.index);
        }
        else {
            return options.index.output || 'index.html';
        }
    }
    exports.getIndexOutputFile = getIndexOutputFile;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9wcmVyZW5kZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSUgseUJBQXlCO0lBQ3pCLCtDQUFrRDtJQUNsRCx5QkFBeUI7SUFDekIsNkJBQTZCO0lBRzdCOzs7T0FHRztJQUNILFNBQXNCLFNBQVMsQ0FDN0IsT0FBZ0MsRUFDaEMsWUFBZ0MsRUFDaEMsT0FBdUI7O1lBRXZCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDO1lBQzFDLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDdEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNwRSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDcEIsRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO3FCQUNwQyxLQUFLLENBQUMsT0FBTyxDQUFDO3FCQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsQ0FBQzthQUNIO1lBRUQsSUFBSSxPQUFPLENBQUMsV0FBVyxJQUFJLFlBQVksRUFBRTtnQkFDdkMsSUFBSTtvQkFDRixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDcEIsaUNBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7eUJBQ3ZELEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7eUJBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakUsQ0FBQztpQkFDSDtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixNQUFNLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMvRDthQUNGO1lBRUQsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDO0tBQUE7SUE3QkQsOEJBNkJDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsVUFBVSxDQUFJLEtBQVUsRUFBRSxhQUFhLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkYsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLFlBQVksQ0FBQyxJQUFJLENBQ2YsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQ3BELENBQUM7U0FDSDtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFWRCxnQ0FVQztJQUVEOztPQUVHO0lBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsT0FBOEI7UUFDL0QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNMLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQU5ELGdEQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEJ1aWxkZXJDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBCcm93c2VyQnVpbGRlck9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcic7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBwYXJzZUFuZ3VsYXJSb3V0ZXMgfSBmcm9tICdndWVzcy1wYXJzZXInO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFByZXJlbmRlckJ1aWxkZXJPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHVuaW9uIG9mIHJvdXRlcywgdGhlIGNvbnRlbnRzIG9mIHJvdXRlc0ZpbGUgaWYgZ2l2ZW4sXG4gKiBhbmQgdGhlIHN0YXRpYyByb3V0ZXMgZXh0cmFjdGVkIGlmIGd1ZXNzUm91dGVzIGlzIHNldCB0byB0cnVlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Um91dGVzKFxuICBvcHRpb25zOiBQcmVyZW5kZXJCdWlsZGVyT3B0aW9ucyxcbiAgdHNDb25maWdQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LFxuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBsZXQgcm91dGVzID0gb3B0aW9ucy5yb3V0ZXMgfHwgW107XG4gIGNvbnN0IHsgbG9nZ2VyLCB3b3Jrc3BhY2VSb290IH0gPSBjb250ZXh0O1xuICBpZiAob3B0aW9ucy5yb3V0ZXNGaWxlKSB7XG4gICAgY29uc3Qgcm91dGVzRmlsZVBhdGggPSBwYXRoLmpvaW4od29ya3NwYWNlUm9vdCwgb3B0aW9ucy5yb3V0ZXNGaWxlKTtcbiAgICByb3V0ZXMgPSByb3V0ZXMuY29uY2F0KFxuICAgICAgZnMucmVhZEZpbGVTeW5jKHJvdXRlc0ZpbGVQYXRoLCAndXRmOCcpXG4gICAgICAgIC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgIC5maWx0ZXIodiA9PiAhIXYpXG4gICAgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmd1ZXNzUm91dGVzICYmIHRzQ29uZmlnUGF0aCkge1xuICAgIHRyeSB7XG4gICAgICByb3V0ZXMgPSByb3V0ZXMuY29uY2F0KFxuICAgICAgICBwYXJzZUFuZ3VsYXJSb3V0ZXMocGF0aC5qb2luKHdvcmtzcGFjZVJvb3QsIHRzQ29uZmlnUGF0aCkpXG4gICAgICAgICAgLm1hcChyb3V0ZU9iaiA9PiByb3V0ZU9iai5wYXRoKVxuICAgICAgICAgIC5maWx0ZXIocm91dGUgPT4gIXJvdXRlLmluY2x1ZGVzKCcqJykgJiYgIXJvdXRlLmluY2x1ZGVzKCc6JykpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGV4dHJhY3Qgcm91dGVzIGZyb20gYXBwbGljYXRpb24uJywgZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFsuLi5uZXcgU2V0KHJvdXRlcyldO1xufVxuXG4vKipcbiAqIEV2ZW5seSBzaGFyZHMgaXRlbXMgaW4gYW4gYXJyYXkuXG4gKiBlLmcuIHNoYXJkQXJyYXkoWzEsIDIsIDMsIDRdLCAyKSA9PiBbWzEsIDJdLCBbMywgNF1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGFyZEFycmF5PFQ+KGl0ZW1zOiBUW10sIG1heE5vT2ZTaGFyZHMgPSAob3MuY3B1cygpLmxlbmd0aCAtIDEpIHx8IDEpOiBUW11bXSB7XG4gIGNvbnN0IHNoYXJkZWRBcnJheSA9IFtdO1xuICBjb25zdCBudW1TaGFyZHMgPSBNYXRoLm1pbihtYXhOb09mU2hhcmRzLCBpdGVtcy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNoYXJkczsgaSsrKSB7XG4gICAgc2hhcmRlZEFycmF5LnB1c2goXG4gICAgICBpdGVtcy5maWx0ZXIoKF8sIGluZGV4KSA9PiBpbmRleCAlIG51bVNoYXJkcyA9PT0gaSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHNoYXJkZWRBcnJheTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBpbmRleCBmaWxlIG91dHB1dHRlZCBieSB0aGUgYnJvd3NlciBidWlsZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXhPdXRwdXRGaWxlKG9wdGlvbnM6IEJyb3dzZXJCdWlsZGVyT3B0aW9ucyk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShvcHRpb25zLmluZGV4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb3B0aW9ucy5pbmRleC5vdXRwdXQgfHwgJ2luZGV4Lmh0bWwnO1xuICB9XG59XG4iXX0=