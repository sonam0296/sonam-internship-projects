{"version":3,"file":"engine.d.ts","sources":["engine.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport { Compiler } from '@angular/core';\r\nimport { NgModuleFactory } from '@angular/core';\r\nimport { ResourceLoader } from '@angular/compiler';\r\nimport { StaticProvider } from '@angular/core';\r\nimport { Type } from '@angular/core';\r\n\r\n/**\r\n * A common rendering engine utility. This abstracts the logic\r\n * for handling the platformServer compiler, the module cache, and\r\n * the document loader\r\n */\r\nexport declare class ɵCommonEngine {\r\n    private moduleOrFactory?;\r\n    private providers;\r\n    /** Return an instance of the platformServer compiler */\r\n    getCompiler(): Compiler;\r\n    private factoryCacheMap;\r\n    private templateCache;\r\n    constructor(moduleOrFactory?: Type<{}> | NgModuleFactory<{}> | undefined, providers?: StaticProvider[]);\r\n    /**\r\n     * Render an HTML document for a specific URL with specified\r\n     * render options\r\n     */\r\n    render(opts: ɵRenderOptions): Promise<string>;\r\n    /** Return the factory for a given engine instance */\r\n    getFactory(moduleOrFactory: Type<{}> | NgModuleFactory<{}>): Promise<NgModuleFactory<{}>>;\r\n    /** Retrieve the document from the cache or the filesystem */\r\n    private getDocument;\r\n}\r\n\r\n/** ResourceLoader implementation for loading files */\r\nexport declare class ɵFileLoader implements ResourceLoader {\r\n    get(url: string): Promise<string>;\r\n}\r\n\r\n/** These are the allowed options for the render */\r\nexport declare interface ɵRenderOptions {\r\n    bootstrap: Type<{}> | NgModuleFactory<{}>;\r\n    providers?: StaticProvider[];\r\n    url?: string;\r\n    document?: string;\r\n    documentFilePath?: string;\r\n}\r\n\r\nexport { }\r\n"]}